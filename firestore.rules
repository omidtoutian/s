rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Tweets collection
    match /tweets/{tweetId} {
      allow read: if true;
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['text', 'userId', 'username', 'timestamp'])
        && request.resource.data.text is string
        && request.resource.data.text.size() <= 280;
      allow update: if isSignedIn() 
        && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() 
        && resource.data.userId == request.auth.uid;
    }

    // User profiles
    match /users/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && isOwner(userId);
    }

    // User likes
    match /users/{userId}/likes/{tweetId} {
      allow read: if true;
      allow write: if isSignedIn() && isOwner(userId);
    }

    // User retweets
    match /users/{userId}/retweets/{tweetId} {
      allow read: if true;
      allow write: if isSignedIn() && isOwner(userId);
    }

    // Comments/Replies
    match /tweets/{tweetId}/comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['text', 'userId', 'username', 'timestamp']);
      allow update, delete: if isSignedIn() 
        && resource.data.userId == request.auth.uid;
    }
  }
}
